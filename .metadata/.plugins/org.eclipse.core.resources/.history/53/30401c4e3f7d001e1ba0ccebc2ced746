package com.DMS;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class CategoryManager {
	
	public class Operation {
		
		private Connection connection ;

	    public Operation(String url, String username, String password) throws ClassNotFoundException {
	        try {
	        	Class.forName("org.postgresql.Driver");
	            connection = DriverManager.getConnection("jdbc:postgresql://localhost:7070/Aubaid", "postgres","aubaid");
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	    }

	    public void addEmployee(Item) {
	        try {
	            String sql = "INSERT INTO employees (name, age) VALUES (?, ?)";
	            PreparedStatement preparedStatement = connection.prepareStatement(sql);
	            preparedStatement.setString(1, employee.getName());
	            preparedStatement.setInt(2, employee.getAge());
	            preparedStatement.executeUpdate();
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	    }  

	    public List<Employee> getAllEmployees() {
	        List<Employee> employees = new ArrayList<Employee>();
	        try {
	            Statement statement = connection.createStatement();
	            ResultSet resultSet = statement.executeQuery("SELECT * FROM employees");
	            while (resultSet.next()) {
	                int id = resultSet.getInt("id");
	                String name = resultSet.getString("name");
	                int age = resultSet.getInt("age");
	                employees.add(new Employee(id, name, age));
	            }
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	        return employees;
	    }

	    public void updateEmployee(Employee employee) {
	        try {
	            String sql = "UPDATE employees SET name = ?, age = ? WHERE id = ?";
	            PreparedStatement preparedStatement = connection.prepareStatement(sql);
	            preparedStatement.setString(1, employee.getName());
	            preparedStatement.setInt(2, employee.getAge());
	            preparedStatement.setInt(3, employee.getId());
	            preparedStatement.executeUpdate();
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	    }

	    public void deleteEmployee(int id) {
	        try {
	            String sql = "DELETE FROM employees WHERE id = ?";
	            PreparedStatement preparedStatement = connection.prepareStatement(sql);
	            preparedStatement.setInt(1, id);
	            preparedStatement.executeUpdate();
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	    }

	    public void close() {
	        try {
	            if (connection != null) {
	            	System.out.println("Connection is Ok");
	                connection.close();
	            }
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	    }
	}
}
